// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/sm43/user-goa/design

package client

import (
	userviews "github.com/sm43/user-goa/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// GetResponseBody is the type of the "user" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// ID is the unique id of the user
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// latest company of user
	LatestCompany *CompanyResponseBody `form:"latestCompany,omitempty" json:"latestCompany,omitempty" xml:"latestCompany,omitempty"`
	// all companies user worked at
	Companies []*CompanyResponseBody `form:"companies,omitempty" json:"companies,omitempty" xml:"companies,omitempty"`
}

// CompanyResponseBody is used to define fields on response body types.
type CompanyResponseBody struct {
	// ID is the unique id of the company
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of company
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Location of company
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// NewGetUserOK builds a "user" service "get" endpoint result from a HTTP "OK"
// response.
func NewGetUserOK(body *GetResponseBody) *userviews.UserView {
	v := &userviews.UserView{
		ID:   body.ID,
		Name: body.Name,
	}
	v.LatestCompany = unmarshalCompanyResponseBodyToUserviewsCompanyView(body.LatestCompany)
	v.Companies = make([]*userviews.CompanyView, len(body.Companies))
	for i, val := range body.Companies {
		v.Companies[i] = unmarshalCompanyResponseBodyToUserviewsCompanyView(val)
	}

	return v
}

// ValidateCompanyResponseBody runs the validations defined on
// CompanyResponseBody
func ValidateCompanyResponseBody(body *CompanyResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Location == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location", "body"))
	}
	return
}
