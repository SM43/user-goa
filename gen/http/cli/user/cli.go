// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sm43/user-goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	userc "github.com/sm43/user-goa/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `user (get2|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` user get2` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userGet2Flags = flag.NewFlagSet("get2", flag.ExitOnError)

		userGetFlags = flag.NewFlagSet("get", flag.ExitOnError)
	)
	userFlags.Usage = userUsage
	userGet2Flags.Usage = userGet2Usage
	userGetFlags.Usage = userGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "user":
			switch epn {
			case "get2":
				epf = userGet2Flags

			case "get":
				epf = userGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get2":
				endpoint = c.Get2()
				data = nil
			case "get":
				endpoint = c.Get()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `The user service provide user details.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    get2: Returns User details
    get: Returns User details

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userGet2Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get2

Returns User details

Example:
    `+os.Args[0]+` user get2
`, os.Args[0])
}

func userGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get

Returns User details

Example:
    `+os.Args[0]+` user get
`, os.Args[0])
}
