// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/sm43/user-goa/design

package user

import (
	"context"

	userviews "github.com/sm43/user-goa/gen/user/views"
)

// The user service provide user details.
type Service interface {
	// Returns User details
	Get(context.Context) (res *User, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// User is the result type of the user service get method.
type User struct {
	// ID is the unique id of the user
	ID uint
	// Name of user
	Name string
	// latest company of user
	LatestCompany *Company
	// all companies user worked at
	Companies []*Company
}

type Company struct {
	// ID is the unique id of the company
	ID uint
	// Name of company
	Name string
	// Location of company
	Location string
}

// NewUser initializes result type User from viewed result type User.
func NewUser(vres *userviews.User) *User {
	return newUser(vres.Projected)
}

// NewViewedUser initializes viewed result type User from result type User
// using the given view.
func NewViewedUser(res *User, view string) *userviews.User {
	p := newUserView(res)
	return &userviews.User{Projected: p, View: "default"}
}

// newUser converts projected type User to service type User.
func newUser(vres *userviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Companies != nil {
		res.Companies = make([]*Company, len(vres.Companies))
		for i, val := range vres.Companies {
			res.Companies[i] = transformUserviewsCompanyViewToCompany(val)
		}
	}
	if vres.LatestCompany != nil {
		res.LatestCompany = newCompanyTiny(vres.LatestCompany)
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *userviews.UserView {
	vres := &userviews.UserView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	if res.Companies != nil {
		vres.Companies = make([]*userviews.CompanyView, len(res.Companies))
		for i, val := range res.Companies {
			vres.Companies[i] = transformCompanyToUserviewsCompanyView(val)
		}
	}
	if res.LatestCompany != nil {
		vres.LatestCompany = newCompanyViewTiny(res.LatestCompany)
	}
	return vres
}

// newCompanyTiny converts projected type Company to service type Company.
func newCompanyTiny(vres *userviews.CompanyView) *Company {
	res := &Company{}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newCompany converts projected type Company to service type Company.
func newCompany(vres *userviews.CompanyView) *Company {
	res := &Company{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Location != nil {
		res.Location = *vres.Location
	}
	return res
}

// newCompanyViewTiny projects result type Company to projected type
// CompanyView using the "tiny" view.
func newCompanyViewTiny(res *Company) *userviews.CompanyView {
	vres := &userviews.CompanyView{
		Name: &res.Name,
	}
	return vres
}

// newCompanyView projects result type Company to projected type CompanyView
// using the "default" view.
func newCompanyView(res *Company) *userviews.CompanyView {
	vres := &userviews.CompanyView{
		ID:       &res.ID,
		Name:     &res.Name,
		Location: &res.Location,
	}
	return vres
}

// transformUserviewsCompanyViewToCompany builds a value of type *Company from
// a value of type *userviews.CompanyView.
func transformUserviewsCompanyViewToCompany(v *userviews.CompanyView) *Company {
	if v == nil {
		return nil
	}
	res := &Company{
		ID:       *v.ID,
		Name:     *v.Name,
		Location: *v.Location,
	}

	return res
}

// transformCompanyToUserviewsCompanyView builds a value of type
// *userviews.CompanyView from a value of type *Company.
func transformCompanyToUserviewsCompanyView(v *Company) *userviews.CompanyView {
	res := &userviews.CompanyView{
		ID:       &v.ID,
		Name:     &v.Name,
		Location: &v.Location,
	}

	return res
}
