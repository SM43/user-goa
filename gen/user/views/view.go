// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user views
//
// Command:
// $ goa gen github.com/sm43/user-goa/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID is the unique id of the user
	ID *uint
	// Name of user
	Name *string
	// latest company of user
	LatestCompany *CompanyView
	// all companies user worked at
	Companies []*CompanyView
}

// CompanyView is a type that runs validations on a projected type.
type CompanyView struct {
	// ID is the unique id of the company
	ID *uint
	// Name of company
	Name *string
	// Location of company
	Location *string
}

var (
	// UserMap is a map of attribute names in result type User indexed by view name.
	UserMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"latestCompany",
			"companies",
		},
	}
	// CompanyMap is a map of attribute names in result type Company indexed by
	// view name.
	CompanyMap = map[string][]string{
		"tiny": []string{
			"name",
		},
		"default": []string{
			"id",
			"name",
			"location",
		},
	}
)

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Companies == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("companies", "result"))
	}
	for _, e := range result.Companies {
		if e != nil {
			if err2 := ValidateCompanyView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.LatestCompany != nil {
		if err2 := ValidateCompanyViewTiny(result.LatestCompany); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCompanyViewTiny runs the validations defined on CompanyView using
// the "tiny" view.
func ValidateCompanyViewTiny(result *CompanyView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateCompanyView runs the validations defined on CompanyView using the
// "default" view.
func ValidateCompanyView(result *CompanyView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Location == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location", "result"))
	}
	return
}
